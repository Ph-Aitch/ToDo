(()=>{"use strict";var __webpack_modules__={134:()=>{eval('\n;// ./src/theme.js\nconst theme = (() => {\r\n    const themeToggle = document.querySelector("#toggler")\r\n    themeToggle.addEventListener("click", () => {\r\n        const test = document.body.dataset.theme\r\n        if (test === ``) {\r\n            document.body.dataset.theme = "dark"\r\n            themeToggle.innerHTML = `<span class="mdi mdi-white-balance-sunny"></span>`\r\n        } else {\r\n            document.body.dataset.theme = ""\r\n            themeToggle.innerHTML = `<span class="mdi mdi-weather-night"></span>`\r\n        }\r\n    })\r\n})\n;// ./src/task.js\n\r\n\r\n\r\nconst taskData = []\r\nconst taskId = { value: 0 }\r\n\r\nconst taskControl = (() => {\r\n    class task {\r\n        constructor(name, project, description, priority, importance, dueDate, id) {\r\n            this.name = name\r\n            this.project = project\r\n            this.description = description\r\n            this.priority = priority\r\n            this.importance = importance\r\n            this.dueDate = dueDate\r\n            this.id = id\r\n            this.finished = false\r\n            this.dlt = `<span class="mdi mdi-delete-outline"></span>`\r\n            this.edit = `<span class="mdi mdi-delete-outline"></span>`\r\n        }\r\n    }\r\n\r\n    const addTask = document.querySelector("#add_task")\r\n    const task_dialog = document.querySelector("#dialog")\r\n\r\n    addTask.addEventListener("click", () => {\r\n        if (projectData.length === 0) {\r\n            alert("You must create a project first")\r\n            const addPro = document.querySelector("#add_project")\r\n            addPro.click()\r\n        } else {\r\n            task_dialog.innerHTML =\r\n                `<form action="#" class="form" id="form">\r\n            <h1>Create Task</h1>\r\n            <label for="name">Title:</label>\r\n            <input type="text" autocomplete="off" required autofocus id="name" maxlength="20">\r\n            <label for="description">Description:</label>\r\n            <textarea required autocomplete="off" id="description"></textarea>\r\n            <label for="due_date">Due Date:</label>\r\n            <input required type="date" id="due_date">\r\n            <label for="priority">Priority:</label>\r\n            <select required id="priority">\r\n                <option value="" disabled selected>Select Priority</option>\r\n                <option value="none">None</option>\r\n                <option value="low">Low</option>\r\n                <option value="mid">Mid</option>\r\n                <option value="high">High</option>\r\n                <option value="crit">Critical</option>\r\n            </select>\r\n            <label for="task_project">Project:</label>\r\n            <select required id="task_project">\r\n                <option value="" disabled selected>Select Project</option>${projectOptions()}\r\n            </select>\r\n             <label for="importance">Important:</label>\r\n            <input type="checkbox" id="importance">\r\n            <button type="submit">Add Task</button>\r\n            </form>\r\n            <div class="close" id="close_dia"><span class="mdi mdi-close"></span></div>`\r\n            task_dialog.classList.toggle("taskDia", true)\r\n            task_dialog.showModal()\r\n\r\n            const close = document.querySelector("#close_dia")\r\n            const task_form = document.querySelector("#form")\r\n            task_dialog.addEventListener("click", (e) => {\r\n                if (e.target === task_dialog) {\r\n                    task_dialog.close()\r\n                    task_dialog.classList.toggle("taskDia", false)\r\n                }\r\n            })\r\n            close.addEventListener("click", () => {\r\n                task_dialog.close()\r\n                task_dialog.classList.toggle("taskDia", false)\r\n            })\r\n\r\n            task_form.addEventListener("submit", (e) => {\r\n                e.preventDefault()\r\n                createTask()\r\n                task_form.reset()\r\n                task_dialog.close()\r\n                task_dialog.classList.toggle("taskDia", false)\r\n            })\r\n        }\r\n    })\r\n\r\n    function createTask() {\r\n        const taskName = document.querySelector("#name")\r\n        const taskDesc = document.querySelector("#description")\r\n        const taskDate = document.querySelector("#due_date")\r\n        const taskPrio = document.querySelector("#priority")\r\n        const taskProj = document.querySelector("#task_project")\r\n        const taskImpo = document.querySelector("#importance")\r\n\r\n        const regex = /^\\s*$/g\r\n        const test = taskData.some(task => task.name === taskName.value.trim())\r\n        if (regex.test(taskName.value.trim()) || test) {\r\n            alert("A Task With The Same Name Exists\\nOr You Entered An Invalid Name\\nPlease Enter Another Name")\r\n            taskName.value = ``\r\n        } else {\r\n            const tsk = new task(taskName.value, taskProj.value, taskDesc.value, taskPrio.value, taskImpo.checked, new Date(taskDate.value), taskId.value)\r\n            taskData.push(tsk)\r\n            taskId.value++\r\n            save()\r\n            updateGrid(document.querySelector(".active"))\r\n            const projects = Array.from(document.querySelectorAll(".project"))\r\n            const pro = projects.find(pro => pro.querySelector("p").textContent === tsk.project)\r\n            projectFinish(pro)\r\n        }\r\n    }\r\n})\r\n\r\nfunction formatDate(date) {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \'0\');\r\n    const day = String(date.getDate()).padStart(2, \'0\');\r\n    return `${year}-${month}-${day}`;\r\n}\r\n\r\nfunction renderTask(task) {\r\n    const taskContent = document.querySelector("#task_content")\r\n    const taskCard = document.createElement("div")\r\n    taskCard.className = "task-card"\r\n    taskCard.dataset.taskId = task.id\r\n    taskCard.innerHTML =\r\n        `<div class="title">\r\n                    <p>${task.name}</p>\r\n                    <div class="btns">\r\n                        <div class = "task-finished" title = "Finished"><span class="mdi mdi-check-decagram-outline"></span></div>\r\n                        ${task.importance ? `<div class="impo flag">\r\n                            <span class="mdi mdi-star"></span>\r\n                        </div>` : `<div class="impo" id="impo">\r\n                            <span class="mdi mdi-star-outline"></span>\r\n                        </div>` }\r\n                        <div class="edit-task"><span class="mdi mdi-pencil"></span></div>\r\n                        <div class="dlt-task"><span class="mdi mdi-delete-outline"></span></div>\r\n                    </div>\r\n                </div>\r\n                <span>project: ${task.project}</span>\r\n                <div class="task-desc">\r\n                    ${task.description}\r\n                </div>\r\n                <div class="info">\r\n                    <div class="prio ${task.priority}">${task.priority === "crit" ? "Critical" : task.priority}</div>\r\n                    <div class="date">${formatDate(task.dueDate)}</div>\r\n                </div>\r\n                <div class="overlay" ${task.finished ? \'style="display: flex;"\' : \'\'}><span class="mdi mdi-check-decagram"></span></div>`\r\n    const dlt = taskCard.querySelector(".dlt-task")\r\n    dlt.addEventListener("click", () => {\r\n        const confirmation = confirm("do you really want to delete this task?")\r\n        if (confirmation) {\r\n            const remove = taskData.findIndex(task => task.id === Number(taskCard.dataset.taskId))\r\n            taskData.splice(remove, 1)\r\n            save()\r\n            taskCard.remove()\r\n            const projects = Array.from(document.querySelectorAll(".project"))\r\n            const pro = projects.find(pro => pro.querySelector("p").textContent === task.project)\r\n            projectFinish(pro)\r\n        }\r\n    })\r\n    const importance = taskCard.querySelector(".impo")\r\n    importance.addEventListener("click", () => {\r\n        let impo = taskData.find(task => task.id === Number(taskCard.dataset.taskId))\r\n        if (importance.classList.contains("flag")) {\r\n            importance.classList.toggle("flag")\r\n            importance.innerHTML = `<span class="mdi mdi-star-outline"></span>`\r\n            impo.importance = !impo.importance\r\n        } else {\r\n            importance.classList.toggle("flag")\r\n            importance.innerHTML = `<span class="mdi mdi-star"></span>`\r\n            impo.importance = !impo.importance\r\n        }\r\n        save()\r\n        updateGrid(document.querySelector(".active"))\r\n    })\r\n    const finish = taskCard.querySelector(".task-finished")\r\n    finish.addEventListener("click", () => {\r\n        overlay.style.display = "flex"\r\n        task.finished = true\r\n        const projects = Array.from(document.querySelectorAll(".project"))\r\n        const pro = projects.find(pro => pro.querySelector("p").textContent === task.project)\r\n        projectFinish(pro)\r\n        save()\r\n    })\r\n    const overlay = taskCard.querySelector(".overlay")\r\n    overlay.addEventListener("click", () => {\r\n        overlay.style.display = ""\r\n        task.finished = false\r\n        const projects = Array.from(document.querySelectorAll(".project"))\r\n        const pro = projects.find(pro => pro.querySelector("p").textContent === task.project)\r\n        projectFinish(pro)\r\n        save()\r\n    })\r\n    const editTask = taskCard.querySelector(".edit-task")\r\n    editTask.addEventListener("click", editTaskData)\r\n    taskContent.appendChild(taskCard)\r\n}\r\n\r\nfunction editTaskData(e) {\r\n    const task_dialog = document.querySelector("#dialog")\r\n    const taskCard = e.target.closest(".task-card")\r\n    const task = taskData.find(task => task.id === Number(taskCard.dataset.taskId))\r\n    const formattedDueDate = task.dueDate.toISOString().split(\'T\')[0]\r\n    task_dialog.innerHTML =\r\n        `<form action="#" class="form" id="form">\r\n            <h1>Edit Task</h1>\r\n            <label for="name">Title:</label>\r\n            <input type="text" autocomplete="off" required autofocus id="name" maxlength="20" value="${task.name}">\r\n            <label for="description">Description:</label>\r\n            <textarea required autocomplete="off" id="description" >${task.description}</textarea>\r\n            <label for="due_date">Due Date:</label>\r\n            <input required type="date" id="due_date" value="${formattedDueDate}">\r\n            <label for="priority">Priority:</label>\r\n            <select required id="priority">\r\n                <option value="" disabled >Select Priority</option>\r\n                <option value="none" ${task.priority === "none" ? "selected" : ""} >None</option>\r\n                <option value="low" ${task.priority === "low" ? "selected" : ""}>Low</option>\r\n                <option value="mid" ${task.priority === "mid" ? "selected" : ""}>Mid</option>\r\n                <option value="high" ${task.priority === "high" ? "selected" : ""}>High</option>\r\n                <option value="crit" ${task.priority === "crit" ? "selected" : ""}>Critical</option>\r\n            </select>\r\n            <label for="task_project">Project:</label>\r\n            <select required id="task_project">\r\n                <option value="" disabled selected>Select Project</option>${projectOptions()}\r\n            </select>\r\n             <label for="importance">Important:</label>\r\n            <input type="checkbox" id="importance" ${task.importance ? \'checked\' : \'\'}>\r\n            <button type="submit">Edit Task</button>\r\n            </form>\r\n            <div class="close" id="close_dia"><span class="mdi mdi-close"></span></div>`\r\n    task_dialog.classList.toggle("taskDia", true)\r\n    task_dialog.showModal()\r\n\r\n    const close = document.querySelector("#close_dia")\r\n    const task_form = document.querySelector("#form")\r\n    const edit_input = document.querySelector("#name")\r\n    task_dialog.addEventListener("click", (e) => {\r\n        if (e.target === task_dialog) {\r\n            task_dialog.close()\r\n            task_dialog.classList.toggle("taskDia", false)\r\n        }\r\n    })\r\n    close.addEventListener("click", () => {\r\n        task_dialog.close()\r\n        task_dialog.classList.toggle("taskDia", false)\r\n    })\r\n\r\n    task_form.addEventListener("submit", (e) => {\r\n        e.preventDefault()\r\n        editTaskSelected(edit_input.value.trim(), taskCard, task)\r\n        task_form.reset()\r\n        task_dialog.close()\r\n        task_dialog.classList.toggle("taskDia", false)\r\n    })\r\n}\r\n\r\nfunction editTaskSelected(newName, taskCard, task) {\r\n    const taskName = document.querySelector("#name")\r\n    const taskDesc = document.querySelector("#description")\r\n    const taskDate = document.querySelector("#due_date")\r\n    const taskPrio = document.querySelector("#priority")\r\n    const taskProj = document.querySelector("#task_project")\r\n    const taskImpo = document.querySelector("#importance")\r\n\r\n    const test = taskData.some(task => task.name === newName.trim())\r\n    const regex = /^\\s*$/\r\n\r\n    if (test || regex.test(newName)) {\r\n        alert("A Project With The Same Name Exists\\nOr You Entered An Invalid Name\\nPlease Enter Another Name")\r\n        document.querySelector("#name").value = ``\r\n    } else {\r\n        task.name = taskName.value.trim()\r\n        task.importance = taskImpo.checked\r\n        task.project = taskProj.value.trim()\r\n        task.description = taskDesc.value.trim()\r\n        task.priority = taskPrio.value\r\n        task.date = new Date(taskDate.value)\r\n        save()\r\n        taskCard.innerHTML =\r\n            `<div class="title">\r\n                    <p>${task.name}</p>\r\n                    <div class="btns">\r\n                        <div class = "task-finished" title = "Finished"><span class="mdi mdi-check-decagram-outline"></span></div>\r\n                        ${task.importance ? `<div class="impo flag">\r\n                            <span class="mdi mdi-star"></span>\r\n                        </div>` : `<div class="impo" id="impo">\r\n                            <span class="mdi mdi-star-outline"></span>\r\n                        </div>` }\r\n                        <div class="edit-task"><span class="mdi mdi-pencil"></span></div>\r\n                        <div class="dlt-task"><span class="mdi mdi-delete-outline"></span></div>\r\n                    </div>\r\n                </div>\r\n                <span>project: ${task.project}</span>\r\n                <div class="task-desc">\r\n                    ${task.description}\r\n                </div>\r\n                <div class="info">\r\n                    <div class="prio ${task.priority}">${task.priority === "crit" ? "Critical" : task.priority}</div>\r\n                    <div class="date">${formatDate(task.dueDate)}</div>\r\n                </div>\r\n                <div class="overlay" ${task.finished ? \'style="display: flex;"\' : \'\'}><span class="mdi mdi-check-decagram"></span></div>`\r\n        const dlt = taskCard.querySelector(".dlt-task")\r\n        dlt.addEventListener("click", () => {\r\n            const confirmation = confirm("do you really want to delete this task?")\r\n            if (confirmation) {\r\n                const remove = taskData.findIndex(task => task.id === Number(taskCard.dataset.taskId))\r\n                taskData.splice(remove, 1)\r\n                save()\r\n                taskCard.remove()\r\n            }\r\n        })\r\n        const importance = taskCard.querySelector(".impo")\r\n        importance.addEventListener("click", () => {\r\n            let impo = taskData.find(task => task.id === Number(taskCard.dataset.taskId))\r\n            if (importance.classList.contains("flag")) {\r\n                importance.classList.toggle("flag")\r\n                importance.innerHTML = `<span class="mdi mdi-star-outline"></span>`\r\n                impo.importance = !impo.importance\r\n            } else {\r\n                importance.classList.toggle("flag")\r\n                importance.innerHTML = `<span class="mdi mdi-star"></span>`\r\n                impo.importance = !impo.importance\r\n            }\r\n            save()\r\n            updateGrid(document.querySelector(".active"))\r\n        })\r\n        const finish = taskCard.querySelector(".task-finished")\r\n        finish.addEventListener("click", () => {\r\n            overlay.style.display = "flex"\r\n            task.finished = true\r\n            const projects = Array.from(document.querySelectorAll(".project"))\r\n            const pro = projects.find(pro => pro.querySelector("p").textContent === task.project)\r\n            projectFinish(pro)\r\n            save()\r\n        })\r\n        const overlay = taskCard.querySelector(".overlay")\r\n        overlay.addEventListener("click", () => {\r\n            overlay.style.display = ""\r\n            task.finished = false\r\n            const projects = Array.from(document.querySelectorAll(".project"))\r\n            const pro = projects.find(pro => pro.querySelector("p").textContent === task.project)\r\n            projectFinish(pro)\r\n            save()\r\n        })\r\n        const editTask = taskCard.querySelector(".edit-task")\r\n        editTask.addEventListener("click", editTaskData)\r\n        document.querySelector("#form").reset()\r\n        document.querySelector("#dialog").close()\r\n        updateGrid(document.querySelector(".active"))\r\n    }\r\n}\r\n\r\nconst projectOptions = function turnProjectsIntoOptions() {\r\n    const options = projectData.map(pro => `<option value="${pro.name}">${pro.name}</option>`)\r\n    return options.join("")\r\n}\n;// ./src/screen.js\n\r\n\r\n\r\n\r\nconst display = (() => {\r\n    updateNav()\r\n    document.addEventListener("click", (e) => {\r\n        const projects = Array.from(document.querySelectorAll(".project"))\r\n        const tabs = Array.from(document.querySelectorAll(".tab"))\r\n        switch (e.target.className) {\r\n            case "project":\r\n            case "tab":\r\n            case "project finished":\r\n                projects.forEach(pro => pro.classList.toggle("active", false))\r\n                tabs.forEach(tab => tab.classList.toggle("active", false))\r\n                e.target.classList.toggle("active", true)\r\n                updateNav()\r\n                updateGrid(document.querySelector(".active"))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n})\r\n\r\nfunction updateGrid(tab) {\r\n    const content = document.querySelector("#task_content")\r\n    const today = new Date()\r\n    const oneWeekFromNow = new Date();\r\n    const yesterday = new Date()\r\n    switch (tab.id) {\r\n        case "all_tasks":\r\n            content.innerHTML = ``\r\n            taskData.forEach(task => renderTask(task))\r\n            document.querySelector(".active").click()\r\n            break;\r\n        case "today_tasks":\r\n            content.innerHTML = ``\r\n            const todayTasks = taskData.filter(task => task.dueDate.getDate() === today.getDate() && task.dueDate.getMonth() === today.getMonth() && task.dueDate.getFullYear() === today.getFullYear())\r\n            todayTasks.forEach(task => renderTask(task))\r\n            break;\r\n        case "this_week_tasks":\r\n            content.innerHTML = ``\r\n            oneWeekFromNow.setDate(today.getDate() + 7)\r\n            yesterday.setDate(today.getDate()-1)\r\n            const weekTasks = taskData.filter(task => task.dueDate >= yesterday && task.dueDate <= oneWeekFromNow)\r\n            weekTasks.forEach(task => renderTask(task))\r\n            break;\r\n        case "important_tasks":\r\n            content.innerHTML = ``\r\n            const importantTasks = taskData.filter(task => task.importance === true)\r\n            importantTasks.forEach(task => renderTask(task))\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (tab.classList.contains("project")) {\r\n        content.innerHTML = ``\r\n        const projectTasks = taskData.filter(task => task.project === tab.querySelector("p").textContent)\r\n        projectTasks.forEach(task => renderTask(task))\r\n    }\r\n}\r\n\r\nfunction updateNav() {\r\n    const navbar = document.querySelector("#navbar")\r\n    const Selected = document.querySelector(".active")\r\n    if (Selected.classList.contains("project")) {\r\n        navbar.innerHTML = `<h1><span class="edit mdi mdi-pencil"></span> ${Selected.textContent.trim()}</h1>`\r\n        const editBtn = document.querySelector("#navbar .edit")\r\n        editBtn.addEventListener("click", edit)\r\n    } else if (Selected.classList.contains("tab")) {\r\n        navbar.innerHTML = `<h1>${Selected.textContent.trim()}</h1>`\r\n    } else {\r\n        navbar.innerHTML = ``\r\n    }\r\n}\r\n\r\nfunction edit() {\r\n    const edit_project_dialog = document.querySelector("#dialog")\r\n    edit_project_dialog.innerHTML = `<form action="#" id="form" class="form">\r\n    <h1>Edit Project</h1>\r\n    <label for="name">Edit Name</label>\r\n    <input type="text" autocomplete="off" required autofocus id="name" maxlength="20">\r\n    <button type="submit">Edit Project</button>\r\n    </form>\r\n    <div class="close" id="close_dia"><span class="mdi mdi-close"></span></div>`\r\n    edit_project_dialog.showModal()\r\n    const edit_project_form = document.querySelector("#form")\r\n    const edit_input = document.querySelector("#name")\r\n    const close_edit = document.querySelector("#close_dia")\r\n\r\n    edit_project_dialog.addEventListener("click", (e) => {\r\n        if (e.target === edit_project_dialog) {\r\n            edit_project_dialog.close()\r\n        }\r\n    })\r\n    close_edit.addEventListener("click", () => {\r\n        edit_project_dialog.close()\r\n    })\r\n\r\n    edit_project_form.onsubmit = (e) => {\r\n        e.preventDefault()\r\n        editSelection(edit_input.value.trim())\r\n        save()\r\n    }\r\n}\r\n\r\nfunction editSelection(newName) {\r\n    const projects = document.querySelector("#project_content")\r\n    const test = projectData.some(pro => pro.name === newName.trim())\r\n    const regex = /^\\s*$/\r\n\r\n    if (test || regex.test(newName)) {\r\n        alert("A Project With The Same Name Exists\\nOr You Entered An Invalid Name\\nPlease Enter Another Name")\r\n        document.querySelector("#name").value = ``\r\n    } else {\r\n        const project = projects.querySelector(".active")\r\n        const pro = projectData.find(pro => pro.id === Number(project.dataset.projectId))\r\n        pro.name = String(newName.trim())\r\n        const tsk = taskData.forEach(task => task.project === project.querySelector("p").textContent ? task.project = String(newName.trim()): task)\r\n        project.querySelector("p").textContent = newName.trim()\r\n        document.querySelector("#form").reset()\r\n        document.querySelector("#dialog").close()\r\n        save()\r\n        updateNav()\r\n        updateGrid(document.querySelector(".active"))\r\n    }\r\n}\n;// ./src/save&load.js\n\r\n\r\n\r\n\r\nfunction save() {\r\n    localStorage.setItem("projectData", JSON.stringify(projectData))\r\n    localStorage.setItem("projectId", JSON.stringify(projectId))\r\n    localStorage.setItem("taskId", JSON.stringify(taskId))\r\n    const taskDataWithStringDates = taskData.map(task => {\r\n        return { ...task, dueDate: task.dueDate.toISOString() }\r\n    })\r\n    localStorage.setItem(\'taskData\', JSON.stringify(taskDataWithStringDates));\r\n}\r\n\r\nfunction load() {\r\n    const savedProjectData = localStorage.getItem(\'projectData\')\r\n    const savedProjectId = localStorage.getItem(\'projectId\')\r\n    const savedTaskId = localStorage.getItem(\'taskId\')\r\n    const savedTaskData = localStorage.getItem(\'taskData\')\r\n\r\n    if (savedProjectId) {\r\n        projectId.value = JSON.parse(savedProjectId).value\r\n    }\r\n\r\n    if (savedTaskId) {\r\n        taskId.value = JSON.parse(savedTaskId).value\r\n    }\r\n\r\n    if (savedTaskData) {\r\n        const parsedTaskData = JSON.parse(savedTaskData)\r\n        const taskDataWithDateObjs = parsedTaskData.map(task => { return { ...task, dueDate: new Date(task.dueDate) } })\r\n        taskData.push(...taskDataWithDateObjs)\r\n        updateGrid(document.querySelector(".active"))\r\n    }\r\n\r\n    if (savedProjectData) {\r\n        projectData.push(...JSON.parse(savedProjectData))\r\n        projectData.forEach(pro => render(pro))\r\n    }\r\n}\n;// ./src/project.js\n\r\n\r\n\r\n\r\nconst projectData = []\r\nconst projectId = { value: 0 }\r\n\r\nconst projectControl = (() => {\r\n    class project {\r\n        constructor(name, id) {\r\n            this.name = name\r\n            this.dlt = `<span class="mdi mdi-delete-outline"></span>`\r\n            this.id = id\r\n            this.finished = false\r\n        }\r\n    }\r\n\r\n\r\n    const addProject = document.querySelector("#add_project")\r\n    const project_dialog = document.querySelector("#dialog")\r\n\r\n    addProject.addEventListener("click", () => {\r\n        project_dialog.innerHTML = `<form action="#" id="form" class="form">\r\n        <h1>Create Project</h1>\r\n        <label for="name">Project Name</label>\r\n        <input type="text" autocomplete="off" required autofocus id="name" maxlength="20">\r\n        <button type="submit">Add Project</button>\r\n        </form>\r\n        <div class="close" id="close_dia"><span class="mdi mdi-close"></span></div>`\r\n        project_dialog.showModal()\r\n\r\n        const close = document.querySelector("#close_dia")\r\n        const project_form = document.querySelector("#form")\r\n        project_dialog.addEventListener("click", (e) => {\r\n            if (e.target === project_dialog) {\r\n                project_dialog.close()\r\n            }\r\n        })\r\n        close.addEventListener("click", () => {\r\n            project_dialog.close()\r\n        })\r\n\r\n        project_form.addEventListener("submit", (e) => {\r\n            e.preventDefault()\r\n            createProject()\r\n            save()\r\n            project_form.reset()\r\n            project_dialog.close()\r\n        })\r\n    })\r\n\r\n    function createProject() {\r\n        const input = document.querySelector("#name")\r\n        const regex = /^\\s*$/g\r\n        const test = projectData.some(project => project.name === input.value.trim())\r\n        if (regex.test(input.value.trim()) || test) {\r\n            alert("A Project With The Same Name Exists\\nOr You Entered An Invalid Name\\nPlease Enter Another Name")\r\n            input.value = ``\r\n        } else {\r\n            const pro = new project(input.value.trim(), projectId.value);\r\n            projectData.push(pro)\r\n            projectId.value++\r\n            save()\r\n            render(pro)\r\n        }\r\n    }\r\n\r\n})\r\n\r\nfunction render(pro) {\r\n    const projectContent = document.querySelector("#project_content")\r\n    const project = document.createElement("div")\r\n    const name = document.createElement("p")\r\n    const dlt = document.createElement("div")\r\n    project.innerHTML +=\r\n        `<svg class="circle" id="pieChart"><circle class="fill"/></svg>`\r\n    project.className = "project"\r\n    project.dataset.projectId = pro.id\r\n    name.textContent = pro.name\r\n    dlt.innerHTML = pro.dlt\r\n    dlt.className = "dlt"\r\n    dlt.addEventListener("click", () => {\r\n        const confirmation = confirm("Do you really want to delete this project?")\r\n        if (confirmation) {\r\n            const confirmation2 = confirm("You will also remove all assosiated TASKs with this project")\r\n            if (confirmation2) {\r\n                const remove = projectData.findIndex(pro => pro.id === Number(project.dataset.projectId))\r\n                projectData.splice(remove, 1)\r\n                const newTaskData = taskData.filter(task => task.project !== project.querySelector("p").textContent)\r\n                taskData.length = 0\r\n                newTaskData.forEach(task => taskData.push(task))\r\n                project.remove()\r\n                projectData.length === 0 ? document.querySelector(".tab").click() : document.querySelector(".project").click()\r\n                updateGrid(document.querySelector(".active"))\r\n                save()\r\n            }\r\n        }\r\n    })\r\n    project.appendChild(name)\r\n    project.appendChild(dlt)\r\n    projectContent.appendChild(project)\r\n    projectFinish(project)\r\n}\r\n\r\nfunction projectFinish(pro) {\r\n    const tasksCount = taskData.filter(task => task.project === pro.querySelector("p").textContent).length\r\n    const taskFinishedCount = taskData.filter(task => task.project === pro.querySelector("p").textContent && task.finished === true).length\r\n    const project = projectData.find(proj => proj.name === pro.querySelector("p").textContent)\r\n    if (tasksCount === 0) {\r\n        pro.classList.toggle("finished", false)\r\n        project.finished = false\r\n        const circle = pro.querySelector("svg circle")\r\n        const svg = pro.querySelector("svg")\r\n        svg.style.border = ``\r\n        circle.setAttribute("stroke-dashoffset", `55px`)\r\n    } else if (tasksCount > 0 && tasksCount !== taskFinishedCount) {\r\n        project.finished = false\r\n        pro.classList.toggle("finished", false)\r\n        const circle = pro.querySelector("svg circle")\r\n        const svg = pro.querySelector("svg")\r\n        svg.style.border = ``\r\n        const newOffset = `${55 * (1 - taskFinishedCount / tasksCount)}px`\r\n        circle.setAttribute("stroke-dashoffset", newOffset)\r\n    } else if (tasksCount === taskFinishedCount) {\r\n        project.finished = true\r\n        pro.classList.toggle("finished", true)\r\n        const circle = pro.querySelector("svg circle")\r\n        const svg = pro.querySelector("svg")\r\n        circle.setAttribute("stroke-dashoffset", `0px`)\r\n        svg.style.border = `2px solid var(--secondry-bg)`\r\n    } \r\n}\n;// ./src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction init() {\r\n    load()\r\n    theme()\r\n    projectControl()\r\n    display()\r\n    taskControl()\r\n}\r\n\r\ninit()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///134\n')}},__webpack_exports__={};__webpack_modules__[134]()})();